import os
import json
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes

BASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')
# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –º–µ—Ç—Ä–∏–∫
METRICS_DIR = os.path.join(BASE_DIR, 'metrics')
if not os.path.exists(METRICS_DIR):
    os.makedirs(METRICS_DIR)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–ø—Ä–æ—Å–æ–≤: —Å–ª–æ–≤–∞—Ä—å { metric_name: survey_id }
CURRENT_SURVEYS_FILE = os.path.join(METRICS_DIR, "current_surveys.json")


def load_current_surveys() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞.
    
    :return: –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ { metric_name: survey_id }
    """
    if os.path.exists(CURRENT_SURVEYS_FILE):
        with open(CURRENT_SURVEYS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


def save_current_surveys(current: dict) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª.
    
    :param current: –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ { metric_name: survey_id }
    """
    with open(CURRENT_SURVEYS_FILE, 'w', encoding='utf-8') as f:
        json.dump(current, f, ensure_ascii=False, indent=2)


def get_metrics_filepath(metric_name: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è.
    
    –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ metrics, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ —Å save.
    
    :param metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "metric1").
    :return: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–µ—Ç—Ä–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "metrics/metric1.json").
    """
    return os.path.join(METRICS_DIR, f"{metric_name}.json")


def load_metrics(metric_name: str) -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    
    :param metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∏.
    """
    filepath = get_metrics_filepath(metric_name)
    if os.path.exists(filepath):
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


def save_metrics(metric_name: str, data: dict) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª.
    
    :param metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏.
    :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∏.
    """
    filepath = get_metrics_filepath(metric_name)
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def is_survey_complete(user_entry: dict) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    :param user_entry: –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: True, –µ—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã (q1, q2, q3, q4) –æ—Ç–≤–µ—á–µ–Ω—ã, –∏–Ω–∞—á–µ False.
    """
    required_questions = {"q1", "q2", "q3", "q4"}
    return required_questions.issubset(user_entry.keys())


def cancel_pending_surveys(metric_name: str, user_id: str) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ä–∞–Ω–µ–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∏ —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–ø—Ä–æ—Å –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω (–Ω–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã).
    –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ JSON-—Ñ–∞–π–ª.
    
    :param metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏.
    :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
    """
    metrics_data = load_metrics(metric_name)
    changed = False
    for survey_id in list(metrics_data.keys()):
        if user_id in metrics_data[survey_id]:
            if not is_survey_complete(metrics_data[survey_id][user_id]):
                del metrics_data[survey_id][user_id]
                changed = True
    if changed:
        save_metrics(metric_name, metrics_data)


def get_question_and_keyboard(question_number: str, metric_name: str, survey_id: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    
    –î–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É (5 –∫–Ω–æ–ø–æ–∫),
    –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ ‚Äì –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É (2 –∫–Ω–æ–ø–∫–∏).
    
    :param question_number: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ ("q1", "q2", "q3", "q4").
    :param metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏.
    :param survey_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞.
    :return: –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏).
    """
    if question_number == "q1":
        text = "‚≠ê –û—Ü–µ–Ω–∏—Ç–µ FEELIX –æ—Ç 1 –¥–æ 5:"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton(str(i), callback_data=f"metrics|{metric_name}|{survey_id}|q1|{i}")
            for i in range(1, 6)
        ]])
    elif question_number == "q2":
        text = "üòä –û—Ü–µ–Ω–∏—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –ø–æ–¥–Ω–∏–º–∞—Ç—å –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton(str(i), callback_data=f"metrics|{metric_name}|{survey_id}|q2|{i}")
            for i in range(1, 6)
        ]])
    elif question_number == "q3":
        text = "üíô –û—Ü–µ–Ω–∏—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —É–ª—É—á—à–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton(str(i), callback_data=f"metrics|{metric_name}|{survey_id}|q3|{i}")
            for i in range(1, 6)
        ]])
    elif question_number == "q4":
        text = "üìù –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"metrics|{metric_name}|{survey_id}|q4|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å"),
            InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"metrics|{metric_name}|{survey_id}|q4|–ø—Ä–æ–ø—É—Å—Ç–∏–ª")
        ]])
    else:
        text = ""
        keyboard = None
    return text, keyboard


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: q1 -> q2 -> q3 -> q4.
QUESTION_ORDER = {
    "q1": "q2",
    "q2": "q3",
    "q3": "q4",
    "q4": None
}


async def start_metrics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_metrics –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    
    –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
      /start_metrics <metric_name>
    
    –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø—Ä–æ—Å–∞ (survey_id) –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ,
    –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ JSON-—Ñ–∞–π–ª, –∏ –ø–µ—Ä–≤–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å (q1) —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ —Ñ–∞–π–ª–µ save/users.json. –ü—Ä–∏ —ç—Ç–æ–º —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω–æ–π
    –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º.
    
    :param update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    from config import MANAGER_USER_ID

    if update.effective_user.id != MANAGER_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏. –ü—Ä–∏–º–µ—Ä: /start_metrics metric1")
        return

    metric_name = context.args[0]
    survey_id = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
    current_surveys = load_current_surveys()
    current_surveys[metric_name] = survey_id
    save_current_surveys(current_surveys)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –æ–ø—Ä–æ—Å–∞
    metrics_data = load_metrics(metric_name)
    metrics_data[survey_id] = {}  # –ó–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    save_metrics(metric_name, metrics_data)

    await update.message.reply_text(f"–ú–µ—Ç—Ä–∏–∫–∞ '{metric_name}' –∑–∞–ø—É—â–µ–Ω–∞ (survey_id={survey_id}).")

    users_file = os.path.join(BASE_DIR, 'save', 'users.json')
    if os.path.exists(users_file):
        with open(users_file, 'r', encoding='utf-8') as f:
            users = json.load(f)
    else:
        users = []

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞
    for user_data in users:
        user_id = user_data.get("user_id")
        if not user_id:
            continue
        cancel_pending_surveys(metric_name, str(user_id))
        try:
            text, keyboard = get_question_and_keyboard("q1", metric_name, survey_id)
            await context.bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard)
            await asyncio.sleep(0.1)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API Telegram
        except Exception:
            continue


async def metrics_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞–º–∫–∞—Ö –æ–ø—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫–∏.
    
    Callback data –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç:
      "metrics|<metric_name>|<survey_id>|<question>|<choice>"
    
    –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª–µ –º–µ—Ç—Ä–∏–∫–∏, —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é. –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å q4
    –∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.
    –ï—Å–ª–∏ –æ–ø—Ä–æ—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç—Å—è.
    
    :param update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    query = update.callback_query
    try:
        await query.answer()
    except Exception:
        pass

    parts = query.data.split("|")
    if len(parts) != 5:
        return

    _, metric_name, survey_id, question, choice = parts
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç survey —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –æ–ø—Ä–æ—Å—É –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
    current_surveys = load_current_surveys()
    current_survey_id = current_surveys.get(metric_name)
    if current_survey_id != survey_id:
        try:
            await query.message.delete()
        except Exception:
            pass
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    metrics_data = load_metrics(metric_name)

    if survey_id not in metrics_data:
        metrics_data[survey_id] = {}

    if str(user_id) not in metrics_data[survey_id]:
        metrics_data[survey_id][str(user_id)] = {}

    metrics_data[survey_id][str(user_id)][question] = choice
    save_metrics(metric_name, metrics_data)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await query.message.delete()
    except Exception:
        pass

    # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å q4 –∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    if question == "q4" and choice == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å":
        try:
            from handlers import user_states
            if user_id not in user_states:
                user_states[user_id] = {}
            user_states[user_id]["waiting_for_feedback"] = True
        except Exception:
            pass
        try:
            await context.bot.send_message(chat_id=user_id, text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
        except Exception:
            pass
    else:
        next_question = QUESTION_ORDER.get(question)
        if next_question:
            text, keyboard = get_question_and_keyboard(next_question, metric_name, survey_id)
            try:
                await context.bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard)
                await asyncio.sleep(0.1)
            except Exception:
                pass
        else:
            try:
                await context.bot.send_message(chat_id=user_id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
            except Exception:
                pass


async def give_metrics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /give_metrics –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    
    –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
      /give_metrics <metric_name>
    
    –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø—Ä–æ—Å–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä—É.
    
    :param update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    from config import MANAGER_USER_ID

    if update.effective_user.id != MANAGER_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏. –ü—Ä–∏–º–µ—Ä: /give_metrics metric1")
        return

    metric_name = context.args[0]
    filepath = get_metrics_filepath(metric_name)
    if not os.path.exists(filepath):
        await update.message.reply_text(f"–§–∞–π–ª –º–µ—Ç—Ä–∏–∫–∏ '{metric_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        with open(filepath, 'rb') as f:
            await update.message.reply_document(document=f, filename=f"{metric_name}.json")
    except Exception:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")