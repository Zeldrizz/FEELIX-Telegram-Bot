import os
import json
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes

BASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')
METRICS_DIR = os.path.join(BASE_DIR, 'metrics')
if not os.path.exists(METRICS_DIR):
    os.makedirs(METRICS_DIR)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏1: —Å–ª–æ–≤–∞—Ä—å { metric_name: survey_id }
CURRENT_SURVEYS_FILE = os.path.join(METRICS_DIR, "current_surveys.json")


def load_current_surveys() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞.

    :return: –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ { metric_name: survey_id }
    """
    if os.path.exists(CURRENT_SURVEYS_FILE):
        with open(CURRENT_SURVEYS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


def save_current_surveys(current: dict) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª.

    :param current: –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ { metric_name: survey_id }
    """
    with open(CURRENT_SURVEYS_FILE, 'w', encoding='utf-8') as f:
        json.dump(current, f, ensure_ascii=False, indent=2)


def get_metrics_filepath(metric_name: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è.

    –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ metrics, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ —Å save.

    :param metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "metric1" –∏–ª–∏ "metric2").
    :return: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–µ—Ç—Ä–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "metrics/metric1.json").
    """
    return os.path.join(METRICS_DIR, f"{metric_name}.json")


def load_metrics(metric_name: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞. –î–ª—è metric1 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å,
    –¥–ª—è metric2 ‚Äì —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.

    :param metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏.
    :return: –î–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏.
    """
    filepath = get_metrics_filepath(metric_name)
    if os.path.exists(filepath):
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {} if metric_name.lower() == "metric1" else []


def save_metrics(metric_name: str, data) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª.

    :param metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏.
    :param data: –î–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏.
    """
    filepath = get_metrics_filepath(metric_name)
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def is_survey_complete(user_entry: dict) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param user_entry: –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: True, –µ—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã (q1, q2, q3, q4) –æ—Ç–≤–µ—á–µ–Ω—ã, –∏–Ω–∞—á–µ False.
    """
    required_questions = {"q1", "q2", "q3", "q4"}
    return required_questions.issubset(user_entry.keys())


def cancel_pending_surveys(metric_name: str, user_id: str) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ä–∞–Ω–µ–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏ (–º–µ—Ç—Ä–∏–∫–∞1)
    –∏ —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–ø—Ä–æ—Å –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω (–Ω–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã).
    –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ JSON-—Ñ–∞–π–ª.

    :param metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏.
    :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
    """
    metrics_data = load_metrics(metric_name)
    changed = False
    for survey_id in list(metrics_data.keys()):
        if user_id in metrics_data[survey_id]:
            if not is_survey_complete(metrics_data[survey_id][user_id]):
                del metrics_data[survey_id][user_id]
                changed = True
    if changed:
        save_metrics(metric_name, metrics_data)


def get_question_and_keyboard(question_number: str, metric_name: str, survey_id: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.

    –î–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É (5 –∫–Ω–æ–ø–æ–∫),
    –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ ‚Äì –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É (2 –∫–Ω–æ–ø–∫–∏).

    :param question_number: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ ("q1", "q2", "q3", "q4").
    :param metric_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏.
    :param survey_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞.
    :return: –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏).
    """
    if question_number == "q1":
        text = "‚≠ê –û—Ü–µ–Ω–∏—Ç–µ FEELIX –æ—Ç 1 –¥–æ 5 ‚≠ê"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton(str(i), callback_data=f"metrics|{metric_name}|{survey_id}|q1|{i}")
            for i in range(1, 6)
        ]])
    elif question_number == "q2":
        text = "–û—Ü–µ–Ω–∏—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å FEELIX –ø–æ–¥–Ω–∏–º–∞—Ç—å –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòä"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton(str(i), callback_data=f"metrics|{metric_name}|{survey_id}|q2|{i}")
            for i in range(1, 6)
        ]])
    elif question_number == "q3":
        text = "–û—Ü–µ–Ω–∏—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å FEELIX —É–ª—É—á—à–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ üíô"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton(str(i), callback_data=f"metrics|{metric_name}|{survey_id}|q3|{i}")
            for i in range(1, 6)
        ]])
    elif question_number == "q4":
        text = "üìù –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤? üìù"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å üì®", callback_data=f"metrics|{metric_name}|{survey_id}|q4|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å"),
            InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data=f"metrics|{metric_name}|{survey_id}|q4|–ø—Ä–æ–ø—É—Å—Ç–∏–ª")
        ]])
    else:
        text = ""
        keyboard = None
    return text, keyboard


# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è metric1 (–æ–ø—Ä–æ—Å): q1 -> q2 -> q3 -> q4.
QUESTION_ORDER = {
    "q1": "q2",
    "q2": "q3",
    "q3": "q4",
    "q4": None
}


async def compute_metric2(context: ContextTypes.DEFAULT_TYPE) -> dict:
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º user_* –≤ –ø–∞–ø–∫–µ logs, –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã conversation_history.json,
    –≤—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å role == "user", –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ-–∏—Å–∫–ª—é—á–µ–Ω–∏—é.
    –°—É–º–º–∏—Ä—É–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤.
    
    –û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –∑–∞–ø–∏—Å—è–º –≤ —Ñ–∞–π–ª–µ save/users.json.
    –ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ save/inactivity.json.
    –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ (total_symbols / total_users).

    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:
             {
                 "timestamp": <—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è>,
                 "total_symbols": <–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤>,
                 "total_users": <—á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π –≤ users.json>,
                 "not_banned_users": <—á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∑—è—Ç–æ–µ –∏–∑ inactivity.json>,
                 "average_length": <—Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è>
             }
    """
    EXCLUDED_TEXT = ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, "
                     "–ø–æ–ø—Ä–æ–±—É–π —Å–∞–º –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞. "
                     "–ò –∑–∞–∫–æ–Ω—á–∏ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±—Ä—ã–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    total_symbols = 0

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫—É logs
    logs_dir = os.path.join(BASE_DIR, "logs")
    if os.path.exists(logs_dir):
        for d in os.listdir(logs_dir):
            dir_path = os.path.join(logs_dir, d)
            if d.startswith("user_") and os.path.isdir(dir_path):
                conv_file = os.path.join(dir_path, "conversation_history.json")
                if os.path.exists(conv_file):
                    try:
                        with open(conv_file, 'r', encoding='utf-8') as f:
                            conv = json.load(f)
                        for msg in conv:
                            if msg.get("role") == "user" and msg.get("content") != EXCLUDED_TEXT:
                                total_symbols += len(msg.get("content", ""))
                    except Exception:
                        pass

    # –û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ save/users.json
    users_file = os.path.join(BASE_DIR, "save", "users.json")
    total_users = 0
    if os.path.exists(users_file):
        try:
            with open(users_file, 'r', encoding='utf-8') as f:
                user_list = json.load(f)
            total_users = len(user_list)
        except Exception:
            pass

    # –ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞, –±–µ—Ä–µ–º –∏–∑ —Ñ–∞–π–ª–∞ inactivity.json
    inactivity_file = os.path.join(BASE_DIR, "save", "inactivity.json")
    not_banned_users = 0
    if os.path.exists(inactivity_file):
        try:
            with open(inactivity_file, 'r', encoding='utf-8') as f:
                inactivity_data = json.load(f)
            not_banned_users = len(inactivity_data)
        except Exception:
            pass

    average_length = total_symbols / total_users if total_users > 0 else 0

    result = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "total_symbols": total_symbols,
        "total_users": total_users,
        "not_banned_users": not_banned_users,
        "average_length": average_length
    }
    return result


async def start_metrics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_metrics –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.

    –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–∞–≤–µ–Ω "metric2", –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.
    –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–ø—Ä–æ—Å (–º–µ—Ç—Ä–∏–∫–∞1).

    :param update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    from config import MANAGER_USER_ID

    if update.effective_user.id != MANAGER_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏. –ü—Ä–∏–º–µ—Ä: /start_metrics metric1 –∏–ª–∏ metric2")
        return

    metric_name = context.args[0].lower()

    if metric_name == "metric2":
        result = await compute_metric2(context)
        results = load_metrics("metric2")
        if not isinstance(results, list):
            results = []
        results.append(result)
        save_metrics("metric2", results)
        summary = (
            f"Metric2 is ready:\n"
            f"timestamp: {result['timestamp']}\n"
            f"total_symbols: {result['total_symbols']}\n"
            f"total_users: {result['total_users']}\n"
            f"not_banned_users: {result['not_banned_users']}\n"
            f"average_length: {result['average_length']:.2f}"
        )
        await update.message.reply_text(summary)
        return

    # –î–ª—è metric1 (–æ–ø—Ä–æ—Å)
    survey_id = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    current_surveys = load_current_surveys()
    current_surveys[metric_name] = survey_id
    save_current_surveys(current_surveys)

    metrics_data = load_metrics(metric_name)
    metrics_data[survey_id] = {}  # –ó–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    save_metrics(metric_name, metrics_data)

    await update.message.reply_text(f"–ú–µ—Ç—Ä–∏–∫–∞ '{metric_name}' –∑–∞–ø—É—â–µ–Ω–∞ (survey_id={survey_id}).")

    users_file = os.path.join(BASE_DIR, 'save', 'users.json')
    if os.path.exists(users_file):
        with open(users_file, 'r', encoding='utf-8') as f:
            users = json.load(f)
    else:
        users = []

    for user_data in users:
        user_id = user_data.get("user_id")
        if not user_id:
            continue
        cancel_pending_surveys(metric_name, str(user_id))
        try:
            text, keyboard = get_question_and_keyboard("q1", metric_name, survey_id)
            await context.bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard)
            await asyncio.sleep(0.1)
        except Exception:
            continue


async def metrics_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–ø—Ä–æ—Å–∞ (metric1).

    Callback data –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç:
      "metrics|<metric_name>|<survey_id>|<question>|<choice>"

    –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª–µ –º–µ—Ç—Ä–∏–∫–∏, —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é. –ï—Å–ª–∏ —ç—Ç–æ q4 –∏ –≤—ã–±—Ä–∞–Ω
    –≤–∞—Ä–∏–∞–Ω—Ç "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞. –ï—Å–ª–∏ –æ–ø—Ä–æ—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º,
    —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç—Å—è.

    :param update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    query = update.callback_query
    try:
        await query.answer()
    except Exception:
        pass

    parts = query.data.split("|")
    if len(parts) != 5:
        return

    _, metric_name, survey_id, question, choice = parts
    user_id = query.from_user.id

    current_surveys = load_current_surveys()
    current_survey_id = current_surveys.get(metric_name)
    if current_survey_id != survey_id:
        try:
            await query.message.delete()
        except Exception:
            pass
        return

    metrics_data = load_metrics(metric_name)
    if survey_id not in metrics_data:
        metrics_data[survey_id] = {}
    if str(user_id) not in metrics_data[survey_id]:
        metrics_data[survey_id][str(user_id)] = {}
    metrics_data[survey_id][str(user_id)][question] = choice
    save_metrics(metric_name, metrics_data)

    try:
        await query.message.delete()
    except Exception:
        pass

    if question == "q4" and choice == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å":
        try:
            from handlers import user_states
            if user_id not in user_states:
                user_states[user_id] = {}
            user_states[user_id]["waiting_for_feedback"] = True
        except Exception:
            pass
        try:
            await context.bot.send_message(chat_id=user_id, text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
        except Exception:
            pass
    else:
        next_question = QUESTION_ORDER.get(question)
        if next_question:
            text, keyboard = get_question_and_keyboard(next_question, metric_name, survey_id)
            try:
                await context.bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard)
                await asyncio.sleep(0.1)
            except Exception:
                pass
        else:
            try:
                await context.bot.send_message(chat_id=user_id, text="üåü –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üåü")
            except Exception:
                pass


async def give_metrics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /give_metrics –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.

    –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
      /give_metrics <metric_name>

    –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø—Ä–æ—Å–∞ (–∏–ª–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π) –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä—É.

    :param update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    from config import MANAGER_USER_ID

    if update.effective_user.id != MANAGER_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏. –ü—Ä–∏–º–µ—Ä: /give_metrics metric1")
        return

    metric_name = context.args[0].lower()
    filepath = get_metrics_filepath(metric_name)
    if not os.path.exists(filepath):
        await update.message.reply_text(f"–§–∞–π–ª –º–µ—Ç—Ä–∏–∫–∏ '{metric_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        with open(filepath, 'rb') as f:
            await update.message.reply_document(document=f, filename=f"{metric_name}.json")
    except Exception:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")