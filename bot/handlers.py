# bot/handlers.py
import os
import time
import textwrap
from itertools import cycle
import httpx
from typing import Any, Dict, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler
)
# import database
from config import (
    SYSTEM_PROMPT,
    MAX_CHAR_LIMIT,
    SUMMARIZATION_PROMPT,
    GROQ_API_KEYS,
    FEEDBACK_FILE,
    ADMIN_USER_ID,
    CLOUDFLARE_ACCOUNT_ID,
    CLOUDFLARE_GATEWAY_ID
)
from utils import (
    log_message, hash_data, load_user_history,
    save_user_history, archive_user_history, save_user_info
)
from logging_config import logger
import nest_asyncio
import json

nest_asyncio.apply()

api_key_cycle = cycle([key.strip() for key in GROQ_API_KEYS])

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states: Dict[int, str] = {}  # user_id: state
# –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:
# None –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
# "waiting_for_feedback" - –∂–¥–µ–º –æ—Ç–∑—ã–≤

async def summarize_conversation(user_id: int, history: List[Dict[str, str]]) -> str:
    """
    –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–ø—Ä–æ—Å –≤ Groq API.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param history: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user", "content": "..."}, ...].
    :return: –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    history_text = "\n".join([f"{msg['role']}: {msg['content']}" for msg in history])
    try:
        api_key = GROQ_API_KEYS[0]
        
        base_url = f"https://gateway.ai.cloudflare.com/v1/{CLOUDFLARE_ACCOUNT_ID}/{CLOUDFLARE_GATEWAY_ID}/groq"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        data = {
            "messages": [
                {"role": "user", "content": SUMMARIZATION_PROMPT},
                {"role": "system", "content": history_text},
                {"role": "user", "content": '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–µ—Å–∫–∞–∑ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã—à–µ–æ–ø–∏—Å–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.'},
            ],
            "model": "llama3-8b-8192",
            "temperature": 0.5,
            "top_p": 1.0
        }

        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{base_url}/chat/completions",
                headers=headers,
                json=data,
            )
            response.raise_for_status()
            result = response.json()

        summary = result['choices'][0]['message']['content']
        logger.info(f"–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        return summary
    except httpx.HTTPStatusError as http_err:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {http_err}")
        return "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞."
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–∑-–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–∏."

async def add_message(user_id: int, role: str, content: List[str]) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param role: –†–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ('user', 'assistant', 'system').
    :param content: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    history = load_user_history(user_id)
    for message in content:
        history.append({"role": role, "content": message})
    save_user_history(user_id, history)
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {role} - {content}")

    total_chars = sum(len(msg["content"]) for msg in history)
    logger.debug(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {total_chars}")

    if total_chars > MAX_CHAR_LIMIT:
        logger.info(f"–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ ({MAX_CHAR_LIMIT}) –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è.")
        summarized_content = await summarize_conversation(user_id, history)
        summarized_history = [{"role": "system", "content": SYSTEM_PROMPT + ' –í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: ' + summarized_content}]
        save_user_history(user_id, summarized_history)
        logger.info(f"–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.")

async def get_groq_response(user_id: int, prompt_ru: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Groq API –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param prompt_ru: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    await add_message(user_id, "user", [prompt_ru])
    try:
        api_key = GROQ_API_KEYS[0]

        base_url = f"https://gateway.ai.cloudflare.com/v1/{CLOUDFLARE_ACCOUNT_ID}/{CLOUDFLARE_GATEWAY_ID}/groq"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        history = load_user_history(user_id)
        data = {
            "messages": history,
            "model": "llama3-8b-8192",
            "temperature": 0.7,
            "top_p": 0.9
        }

        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{base_url}/chat/completions",
                headers=headers,
                json=data,
            )
            response.raise_for_status()
            result = response.json()

        bot_reply = result['choices'][0]['message']['content']
        await add_message(user_id, "assistant", [bot_reply])
        return bot_reply
    except httpx.HTTPStatusError as http_err:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {http_err}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

def get_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –û–±—ä–µ–∫—Ç ReplyKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    buttons = [
        [KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
        [KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")]
    ]
    if user_id in ADMIN_USER_ID:
        buttons.append([KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã")])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    :param update: –û–±—ä–µ–∫—Ç Update.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name or "unknown_user"
    save_user_info(user_id, username)

    message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø Feelix ‚Äì –≤–∞—à –¥—É—à–µ–≤–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –≥–æ—Ç–æ–≤—ã–π –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ –ª—é–±—É—é –º–∏–Ω—É—Ç—É! ‚ú®\n\n"
        "–Ø –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ —Å—Ç–∞–¥–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–æ—ç—Ç–æ–º—É –º–æ–∏ –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∏–¥–µ–∞–ª—å–Ω—ã–º–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –≤ –º–æ–µ–º —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–∏! üí°\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å "
        "[–ø—Ä–∞–≤–∏–ª–∞–º–∏](https://drive.google.com/file/d/1jcEspFp9-vrwDtXPhsQq2ho-KA9LSmbl/view?usp=sharing) –∏ "
        "[–ø–æ–ª–∏—Ç–∏–∫–æ–π](https://drive.google.com/file/d/1XLRiiLoLLTMSmHWyY9_L0oM4apQHmLDD/view?usp=sharing)."
    )
    await update.message.reply_text(message, parse_mode="Markdown", reply_markup=get_main_menu(user_id))
    log_message(user_id, "user", "/start")
    log_message(user_id, "assistant", message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö.

    :param update: –û–±—ä–µ–∫—Ç Update.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    user_id = update.effective_user.id
    message = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏:\n"
        "1) –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
        "2) –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
    )
    await update.message.reply_text(message, reply_markup=get_main_menu(user_id))
    log_message(user_id, "user", "/help")
    log_message(user_id, "assistant", message)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM.

    :param update: –û–±—ä–µ–∫—Ç Update.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name
    user_message = update.message.text.strip()
    save_user_info(user_id, username)

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
    if user_states.get(user_id) == "waiting_for_feedback":
        # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–º
        feedback_text = user_message
        feedback_dir = os.path.dirname(FEEDBACK_FILE)
        if not os.path.exists(feedback_dir):
            os.makedirs(feedback_dir)

        with open(FEEDBACK_FILE, 'a', encoding='utf-8') as f:
            f.write(f"[{time.strftime('%d/%m/%y %H:%M', time.localtime())}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}): {feedback_text}\n")

        response = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"
        await update.message.reply_text(response, reply_markup=get_main_menu(user_id))
        log_message(user_id, "user", feedback_text)
        log_message(user_id, "assistant", response)
        user_states[user_id] = None
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã"
    if user_message == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        # –ü–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        response = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
        user_states[user_id] = "waiting_for_feedback"
        await update.message.reply_text(response)
        log_message(user_id, "user", user_message)
        log_message(user_id, "assistant", response)
        return

    if user_message == "–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        archive_user_history(user_id)
        response = "–ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞."
        await update.message.reply_text(response, reply_markup=get_main_menu(user_id))
        log_message(user_id, "user", user_message)
        log_message(user_id, "assistant", response)
        return

    if user_message == "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã":
        if user_id in ADMIN_USER_ID:
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏
            if not os.path.exists(FEEDBACK_FILE):
                response = "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
                await update.message.reply_text(response, reply_markup=get_main_menu(user_id))
                log_message(user_id, "user", user_message)
                log_message(user_id, "assistant", response)
                return
            try:
                with open(FEEDBACK_FILE, 'rb') as f:
                    await update.message.reply_document(document=f)
                response = "–§–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
                log_message(user_id, "user", user_message)
                log_message(user_id, "assistant", response)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏: {e}")
                response = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞."
                await update.message.reply_text(response, reply_markup=get_main_menu(user_id))
                log_message(user_id, "user", user_message)
                log_message(user_id, "assistant", response)
        else:
            response = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            await update.message.reply_text(response, reply_markup=get_main_menu(user_id))
            log_message(user_id, "user", user_message)
            log_message(user_id, "assistant", response)
        return

    # –ï—Å–ª–∏ –Ω–µ –æ–¥–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥: —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è LLM
    # database.db_handle_messages(user_id, "user", [user_message])
    # print("top 3 most similar:", database.db_get_similar(user_id, user_message))

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message}")
    log_message(user_id, "user", user_message)

    try:
        response = await get_groq_response(user_id, user_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    logger.info(f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {response}")
    log_message(user_id, "assistant", response)
    await update.message.reply_text(response, reply_markup=get_main_menu(user_id))

def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫. –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.

    :param update: –û–±—ä–µ–∫—Ç Update –∏–ª–∏ None.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    logger.error(msg="Exception while handling an update:", exc_info=context.error)